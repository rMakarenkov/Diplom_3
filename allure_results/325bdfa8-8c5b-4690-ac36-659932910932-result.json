{"name": "Проверка перехода на страницу \"Восстановление пароля\" со страницы \"Авторизация\"", "status": "broken", "statusDetails": {"message": "urllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='localhost', port=49660): Read timed out. (read timeout=120)", "trace": "self = <urllib3.connectionpool.HTTPConnectionPool object at 0x000001ED239177C0>, conn = <urllib3.connection.HTTPConnection object at 0x000001ED23917AF0>, method = 'POST', url = '/session/7ee08bdb-adb5-4e01-a123-0132fbe262b2/url', body = '{\"url\": \"https://stellarburgers.nomoreparties.site/login\"}'\nheaders = HTTPHeaderDict({'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.28.1 (python windows)', 'Connection': 'keep-alive'}), retries = Retry(total=3, connect=None, read=None, redirect=None, status=None)\ntimeout = Timeout(connect=120, read=120, total=None), chunked = False, response_conn = None, preload_content = True, decode_content = True, enforce_content_length = True\n\n    def _make_request(\n        self,\n        conn: BaseHTTPConnection,\n        method: str,\n        url: str,\n        body: _TYPE_BODY | None = None,\n        headers: typing.Mapping[str, str] | None = None,\n        retries: Retry | None = None,\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        chunked: bool = False,\n        response_conn: BaseHTTPConnection | None = None,\n        preload_content: bool = True,\n        decode_content: bool = True,\n        enforce_content_length: bool = True,\n    ) -> BaseHTTPResponse:\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param response_conn:\n            Set this to ``None`` if you will handle releasing the connection or\n            set the connection to have the response release it.\n    \n        :param preload_content:\n          If True, the response's body will be preloaded during construction.\n    \n        :param decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n    \n        :param enforce_content_length:\n            Enforce content length checking. Body returned by server must match\n            value of Content-Length header, if present. Otherwise, raise error.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n    \n        try:\n            # Trigger any extra validation we need to do.\n            try:\n                self._validate_conn(conn)\n            except (SocketTimeout, BaseSSLError) as e:\n                self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n                raise\n    \n        # _validate_conn() starts the connection to an HTTPS proxy\n        # so we need to wrap errors with 'ProxyError' here too.\n        except (\n            OSError,\n            NewConnectionError,\n            TimeoutError,\n            BaseSSLError,\n            CertificateError,\n            SSLError,\n        ) as e:\n            new_e: Exception = e\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                new_e = SSLError(e)\n            # If the connection didn't successfully connect to it's proxy\n            # then there\n            if isinstance(\n                new_e, (OSError, NewConnectionError, TimeoutError, SSLError)\n            ) and (conn and conn.proxy and not conn.has_connected_to_proxy):\n                new_e = _wrap_proxy_error(new_e, conn.proxy.scheme)\n            raise new_e\n    \n        # conn.request() calls http.client.*.request, not the method in\n        # urllib3.request. It also calls makefile (recv) on the socket.\n        try:\n            conn.request(\n                method,\n                url,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n                preload_content=preload_content,\n                decode_content=decode_content,\n                enforce_content_length=enforce_content_length,\n            )\n    \n        # We are swallowing BrokenPipeError (errno.EPIPE) since the server is\n        # legitimately able to close the connection after sending a valid response.\n        # With this behaviour, the received response is still readable.\n        except BrokenPipeError:\n            pass\n        except OSError as e:\n            # MacOS/Linux\n            # EPROTOTYPE and ECONNRESET are needed on macOS\n            # https://erickt.github.io/blog/2014/11/19/adventures-in-debugging-a-potential-osx-kernel-bug/\n            # Condition changed later to emit ECONNRESET instead of only EPROTOTYPE.\n            if e.errno != errno.EPROTOTYPE and e.errno != errno.ECONNRESET:\n                raise\n    \n        # Reset the timeout for the recv() on the socket\n        read_timeout = timeout_obj.read_timeout\n    \n        if not conn.is_closed:\n            # In Python 3 socket.py will catch EAGAIN and return None when you\n            # try and read into the file pointer created by http.client, which\n            # instead raises a BadStatusLine exception. Instead of catching\n            # the exception and assuming all BadStatusLine exceptions are read\n            # timeouts, check for a zero timeout before making the request.\n            if read_timeout == 0:\n                raise ReadTimeoutError(\n                    self, url, f\"Read timed out. (read timeout={read_timeout})\"\n                )\n            conn.timeout = read_timeout\n    \n        # Receive the response from the server\n        try:\n>           response = conn.getresponse()\n\n.venv\\lib\\site-packages\\urllib3\\connectionpool.py:534: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPConnection object at 0x000001ED23917AF0>\n\n    def getresponse(  # type: ignore[override]\n        self,\n    ) -> HTTPResponse:\n        \"\"\"\n        Get the response from the server.\n    \n        If the HTTPConnection is in the correct state, returns an instance of HTTPResponse or of whatever object is returned by the response_class variable.\n    \n        If a request has not been sent or if a previous response has not be handled, ResponseNotReady is raised. If the HTTP response indicates that the connection should be closed, then it will be closed before the response is returned. When the connection is closed, the underlying socket is closed.\n        \"\"\"\n        # Raise the same error as http.client.HTTPConnection\n        if self._response_options is None:\n            raise ResponseNotReady()\n    \n        # Reset this attribute for being used again.\n        resp_options = self._response_options\n        self._response_options = None\n    \n        # Since the connection's timeout value may have been updated\n        # we need to set the timeout on the socket.\n        self.sock.settimeout(self.timeout)\n    \n        # This is needed here to avoid circular import errors\n        from .response import HTTPResponse\n    \n        # Save a reference to the shutdown function before ownership is passed\n        # to httplib_response\n        # TODO should we implement it everywhere?\n        _shutdown = getattr(self.sock, \"shutdown\", None)\n    \n        # Get the response from http.client.HTTPConnection\n>       httplib_response = super().getresponse()\n\n.venv\\lib\\site-packages\\urllib3\\connection.py:516: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPConnection object at 0x000001ED23917AF0>\n\n    def getresponse(self):\n        \"\"\"Get the response from the server.\n    \n        If the HTTPConnection is in the correct state, returns an\n        instance of HTTPResponse or of whatever object is returned by\n        the response_class variable.\n    \n        If a request has not been sent or if a previous response has\n        not be handled, ResponseNotReady is raised.  If the HTTP\n        response indicates that the connection should be closed, then\n        it will be closed before the response is returned.  When the\n        connection is closed, the underlying socket is closed.\n        \"\"\"\n    \n        # if a prior response has been completed, then forget about it.\n        if self.__response and self.__response.isclosed():\n            self.__response = None\n    \n        # if a prior response exists, then it must be completed (otherwise, we\n        # cannot read this response's header to determine the connection-close\n        # behavior)\n        #\n        # note: if a prior response existed, but was connection-close, then the\n        # socket and response were made independent of this HTTPConnection\n        # object since a new request requires that we open a whole new\n        # connection\n        #\n        # this means the prior response had one of two states:\n        #   1) will_close: this connection was reset and the prior socket and\n        #                  response operate independently\n        #   2) persistent: the response was retained and we await its\n        #                  isclosed() status to become true.\n        #\n        if self.__state != _CS_REQ_SENT or self.__response:\n            raise ResponseNotReady(self.__state)\n    \n        if self.debuglevel > 0:\n            response = self.response_class(self.sock, self.debuglevel,\n                                           method=self._method)\n        else:\n            response = self.response_class(self.sock, method=self._method)\n    \n        try:\n            try:\n>               response.begin()\n\nC:\\Users\\HomePC\\AppData\\Local\\Programs\\Python\\Python310\\lib\\http\\client.py:1368: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <http.client.HTTPResponse object at 0x000001ED239179A0>\n\n    def begin(self):\n        if self.headers is not None:\n            # we've already started reading the response\n            return\n    \n        # read until we get a non-100 response\n        while True:\n>           version, status, reason = self._read_status()\n\nC:\\Users\\HomePC\\AppData\\Local\\Programs\\Python\\Python310\\lib\\http\\client.py:317: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <http.client.HTTPResponse object at 0x000001ED239179A0>\n\n    def _read_status(self):\n>       line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n\nC:\\Users\\HomePC\\AppData\\Local\\Programs\\Python\\Python310\\lib\\http\\client.py:278: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <socket.SocketIO object at 0x000001ED23917D90>, b = <memory at 0x000001ED22DA1900>\n\n    def readinto(self, b):\n        \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n        the number of bytes read.  If the socket is non-blocking and no bytes\n        are available, None is returned.\n    \n        If *b* is non-empty, a 0 return value indicates that the connection\n        was shutdown at the other end.\n        \"\"\"\n        self._checkClosed()\n        self._checkReadable()\n        if self._timeout_occurred:\n            raise OSError(\"cannot read from timed out object\")\n        while True:\n            try:\n>               return self._sock.recv_into(b)\nE               TimeoutError: timed out\n\nC:\\Users\\HomePC\\AppData\\Local\\Programs\\Python\\Python310\\lib\\socket.py:705: TimeoutError\n\nThe above exception was the direct cause of the following exception:\n\nself = <test_forgot_password.TestForgotPassword object at 0x000001ED22B18370>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"7ee08bdb-adb5-4e01-a123-0132fbe262b2\")>\n\n    @allure.title('Проверка перехода на страницу \"Восстановление пароля\" со страницы \"Авторизация\"')\n    def test_go_to_password_recovery_page_successful_transition(self, driver):\n        login_page = LoginPage(driver)\n>       login_page.open(urls.LOGIN_URL)\n\ntests\\test_forgot_password.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\base_page.py:17: in open\n    self.driver.get(url)\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:427: in execute\n    response = self.command_executor.execute(driver_command, params)\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:404: in execute\n    return self._request(command_info[0], url, body=data)\n.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:428: in _request\n    response = self._conn.request(method, url, body=body, headers=headers, timeout=self._client_config.timeout)\n.venv\\lib\\site-packages\\urllib3\\_request_methods.py:143: in request\n    return self.request_encode_body(\n.venv\\lib\\site-packages\\urllib3\\_request_methods.py:278: in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n.venv\\lib\\site-packages\\urllib3\\poolmanager.py:443: in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n.venv\\lib\\site-packages\\urllib3\\connectionpool.py:841: in urlopen\n    retries = retries.increment(\n.venv\\lib\\site-packages\\urllib3\\util\\retry.py:474: in increment\n    raise reraise(type(error), error, _stacktrace)\n.venv\\lib\\site-packages\\urllib3\\util\\util.py:39: in reraise\n    raise value\n.venv\\lib\\site-packages\\urllib3\\connectionpool.py:787: in urlopen\n    response = self._make_request(\n.venv\\lib\\site-packages\\urllib3\\connectionpool.py:536: in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x000001ED239177C0>, err = TimeoutError('timed out'), url = '/session/7ee08bdb-adb5-4e01-a123-0132fbe262b2/url', timeout_value = 120\n\n    def _raise_timeout(\n        self,\n        err: BaseSSLError | OSError | SocketTimeout,\n        url: str,\n        timeout_value: _TYPE_TIMEOUT | None,\n    ) -> None:\n        \"\"\"Is the error actually a timeout? Will raise a ReadTimeout or pass\"\"\"\n    \n        if isinstance(err, SocketTimeout):\n>           raise ReadTimeoutError(\n                self, url, f\"Read timed out. (read timeout={timeout_value})\"\n            ) from err\nE           urllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='localhost', port=49660): Read timed out. (read timeout=120)\n\n.venv\\lib\\site-packages\\urllib3\\connectionpool.py:367: ReadTimeoutError"}, "steps": [{"name": "Открываем страницу: 'https://stellarburgers.nomoreparties.site/login'", "status": "broken", "statusDetails": {"message": "urllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='localhost', port=49660): Read timed out. (read timeout=120)\n", "trace": "  File \"D:\\Development\\Diplom_Roman_Makarenkov_18\\Diplom_3\\.venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"D:\\Development\\Diplom_Roman_Makarenkov_18\\Diplom_3\\pages\\base_page.py\", line 17, in open\n    self.driver.get(url)\n  File \"D:\\Development\\Diplom_Roman_Makarenkov_18\\Diplom_3\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 454, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"D:\\Development\\Diplom_Roman_Makarenkov_18\\Diplom_3\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 427, in execute\n    response = self.command_executor.execute(driver_command, params)\n  File \"D:\\Development\\Diplom_Roman_Makarenkov_18\\Diplom_3\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py\", line 404, in execute\n    return self._request(command_info[0], url, body=data)\n  File \"D:\\Development\\Diplom_Roman_Makarenkov_18\\Diplom_3\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py\", line 428, in _request\n    response = self._conn.request(method, url, body=body, headers=headers, timeout=self._client_config.timeout)\n  File \"D:\\Development\\Diplom_Roman_Makarenkov_18\\Diplom_3\\.venv\\lib\\site-packages\\urllib3\\_request_methods.py\", line 143, in request\n    return self.request_encode_body(\n  File \"D:\\Development\\Diplom_Roman_Makarenkov_18\\Diplom_3\\.venv\\lib\\site-packages\\urllib3\\_request_methods.py\", line 278, in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n  File \"D:\\Development\\Diplom_Roman_Makarenkov_18\\Diplom_3\\.venv\\lib\\site-packages\\urllib3\\poolmanager.py\", line 443, in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n  File \"D:\\Development\\Diplom_Roman_Makarenkov_18\\Diplom_3\\.venv\\lib\\site-packages\\urllib3\\connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n  File \"D:\\Development\\Diplom_Roman_Makarenkov_18\\Diplom_3\\.venv\\lib\\site-packages\\urllib3\\util\\retry.py\", line 474, in increment\n    raise reraise(type(error), error, _stacktrace)\n  File \"D:\\Development\\Diplom_Roman_Makarenkov_18\\Diplom_3\\.venv\\lib\\site-packages\\urllib3\\util\\util.py\", line 39, in reraise\n    raise value\n  File \"D:\\Development\\Diplom_Roman_Makarenkov_18\\Diplom_3\\.venv\\lib\\site-packages\\urllib3\\connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n  File \"D:\\Development\\Diplom_Roman_Makarenkov_18\\Diplom_3\\.venv\\lib\\site-packages\\urllib3\\connectionpool.py\", line 536, in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n  File \"D:\\Development\\Diplom_Roman_Makarenkov_18\\Diplom_3\\.venv\\lib\\site-packages\\urllib3\\connectionpool.py\", line 367, in _raise_timeout\n    raise ReadTimeoutError(\n"}, "parameters": [{"name": "url", "value": "'https://stellarburgers.nomoreparties.site/login'"}], "start": 1744228669650, "stop": 1744228789653}], "parameters": [{"name": "driver", "value": "'firefox'"}], "start": 1744228669650, "stop": 1744228789655, "uuid": "5b9c7679-996b-473f-bc4b-30d8afe28353", "historyId": "2ab026a8036d4519eddc7c73491a3797", "testCaseId": "77149c77a7a823b7a02b05283481a5b1", "fullName": "tests.test_forgot_password.TestForgotPassword#test_go_to_password_recovery_page_successful_transition", "labels": [{"name": "feature", "value": "Страница \"Восстановление пароля\""}, {"name": "tag", "value": "forgot_password_page"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_forgot_password"}, {"name": "subSuite", "value": "TestForgotPassword"}, {"name": "host", "value": "DESKTOP-3GN0GBN"}, {"name": "thread", "value": "15836-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_forgot_password"}]}